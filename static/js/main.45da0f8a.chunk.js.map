{"version":3,"sources":["components/Carousel.js","components/CarouselCustomiser.jsx","App.js","index.js"],"names":["Carousel","images","frameSize","step","itemWidth","animationDuration","render","infinite","useState","container","setContainer","scroll","setScroll","maxScroll","useEffect","element","document","getElementById","className","style","width","id","transition","map","img","key","src","alt","onClick","scrollLeft","type","display","CarouselCustomizer","carouselAdjustments","onchange","reset","onSubmit","htmlFor","name","value","onChange","placeholder","App","state","handleAdjustmentValues","bind","handleResetAdjustmentValues","event","target","this","setState","e","preventDefault","length","React","Component","ReactDOM"],"mappings":"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","file":"static/js/main.45da0f8a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Carousel.scss';\n\nexport const Carousel = ({\n  images,\n  frameSize,\n  step,\n  itemWidth,\n  animationDuration,\n  infinite,\n  render,\n}) => {\n  const [container, setContainer] = useState(null);\n  const [scroll, setScroll] = useState(0);\n  const maxScroll = 1300 - itemWidth * frameSize;\n\n  useEffect(() => {\n    const element = document.getElementById('carousel');\n\n    setContainer(element);\n  }, [scroll]);\n\n  const onMoveLeft = () => {\n    container.scrollLeft -= step * itemWidth;\n    setScroll(container.scrollLeft);\n  };\n\n  const onMoveRight = () => {\n    container.scrollLeft += step * itemWidth;\n    setScroll(container.scrollLeft);\n  };\n\n  return (\n    <>\n      <div\n        className=\"Carousel-container\"\n        style={{ width: `${frameSize * itemWidth}px` }}\n      >\n        <div\n          id=\"carousel\"\n          className=\"Carousel\"\n          style={\n            {\n              width: `${frameSize * itemWidth}px`,\n              transition: `${animationDuration}ms`,\n            }\n          }\n        >\n          <ul id=\"carousel-items\" className=\"Carousel__list\">\n            {images.map(img => (\n              <li key={img} style={{ width: `${itemWidth}px` }}>\n                <img src={`.${img}`} alt={img} />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <button className=\"arrow-button\" onClick={onMoveRight} type=\"button\">\n          <span\n            className=\"arrow-right\"\n            style={{ display: scroll !== maxScroll ? 'block' : 'none' }}\n          />\n        </button>\n        <button className=\"arrow-button\" onClick={onMoveLeft} type=\"button\">\n          <span\n            className=\"arrow-left\"\n            style={{ display: scroll ? 'block' : 'none' }}\n          />\n        </button>\n      </div>\n      {render()}\n    </>\n  );\n};\n\nCarousel.propTypes = {\n  images: PropTypes.arrayOf(\n    PropTypes.string,\n  ).isRequired,\n  itemWidth: PropTypes.number.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  animationDuration: PropTypes.number.isRequired,\n  infinite: PropTypes.bool.isRequired,\n  render: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport './CarouselCustomiser.css';\nimport PropTypes from 'prop-types';\n\nexport const CarouselCustomizer = ({\n  carouselAdjustments,\n  onchange,\n  reset,\n}) => (\n  <div className=\"carousel-customizer\">\n    <form onSubmit={reset}>\n      <label htmlFor=\"step\">Step</label>\n      <input\n        id=\"step\"\n        type=\"number\"\n        name=\"step\"\n        value={carouselAdjustments.step}\n        onChange={onchange}\n        placeholder=\"Step\"\n      />\n      <label htmlFor=\"frameSize\">Frame Size</label>\n      <input\n        id=\"frameSize\"\n        type=\"number\"\n        name=\"frameSize\"\n        value={carouselAdjustments.frameSize}\n        onChange={onchange}\n        placeholder=\"Frame size\"\n      />\n      <label htmlFor=\"itemWidth\">Item Width</label>\n      <input\n        id=\"itemWidth\"\n        type=\"number\"\n        name=\"itemWidth\"\n        value={carouselAdjustments.itemWidth}\n        onChange={onchange}\n        placeholder=\"Item width\"\n      />\n      <label htmlFor=\"animationDuration\">Animation Duration</label>\n      <input\n        id=\"animationDuration\"\n        type=\"number\"\n        name=\"animationDuration\"\n        value={carouselAdjustments.animationDuration}\n        onChange={carouselAdjustments}\n        placeholder=\"Animation duration\"\n      />\n      <label htmlFor=\"infinite\">Infinite</label>\n      <input\n        id=\"infinite\"\n        type=\"text\"\n        name=\"infinite\"\n        value={carouselAdjustments.infinite}\n        onChange={carouselAdjustments}\n        placeholder=\"infinite\"\n      />\n      <button type=\"submit\">Reset</button>\n    </form>\n  </div>\n);\n\nCarouselCustomizer.propTypes = {\n  carouselAdjustments: PropTypes.shape({\n    step: PropTypes.number.isRequired,\n    frameSize: PropTypes.number.isRequired,\n    itemWidth: PropTypes.number.isRequired,\n    animationDuration: PropTypes.number.isRequired,\n    infinite: PropTypes.bool.isRequired,\n  }).isRequired,\n  reset: PropTypes.func.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\n\nimport { Carousel } from './components/Carousel';\nimport { CarouselCustomizer } from './components/CarouselCustomiser';\n\nclass App extends React.Component {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    carouselAdjustments: {\n      step: 2,\n      frameSize: 3,\n      itemWidth: 130,\n      animationDuration: 1000,\n      infinite: false,\n    },\n  };\n\n  handleAdjustmentValues = this.handleAdjustmentValues.bind(this);\n\n  handleResetAdjustmentValues = this.handleResetAdjustmentValues.bind(this);\n\n  handleAdjustmentValues(event) {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      ...state,\n      carouselAdjustments: {\n        ...state.carouselAdjustments,\n        [name]: value,\n      },\n    }));\n  }\n\n  handleResetAdjustmentValues(e) {\n    e.preventDefault();\n    this.setState({\n      carouselAdjustments: {\n        step: 2,\n        frameSize: 3,\n        itemWidth: 130,\n        animationDuration: 1000,\n        infinite: false,\n      },\n    });\n  }\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={this.state.images}\n          step={this.state.carouselAdjustments.step}\n          frameSize={this.state.carouselAdjustments.frameSize}\n          itemWidth={this.state.carouselAdjustments.itemWidth}\n          animationDuration={this.state.carouselAdjustments.animationDuration}\n          infinite={this.state.carouselAdjustments.infinite}\n          render={() => (\n            <CarouselCustomizer\n              onchange={this.handleAdjustmentValues}\n              carouselAdjustments={this.state.carouselAdjustments}\n              reset={this.handleResetAdjustmentValues}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}